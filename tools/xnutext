#!/usr/bin/env -S nu --plugins ['/usr/share/nutext/nu_plugin_nutext']

# Extract localized strings from files.
#
# NOTE: This requires that you have nutext installed.
def main [
    --output (-o): path # Output file
    ...files: path # Input files
] {
    if ($files | path exists | any {|path| $path == false}) {
        print -e $"Cannot find path\(s\)"
        exit 1
    }

    mut buffer = 'msgid ""
msgstr ""
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: ENCODING\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"'
    $buffer += "\n\n"

    for file in $files {
        let file_ast = (ast -f (open --raw $file))
        mut found_tprint = false
        for section in ($file_ast | enumerate) {
            let cont = $section.item
            if ($found_tprint == false) {
                if ($cont.content == "tprint" and $cont.shape == "shape_internalcall") or ($cont.content == "_" and $cont.shape == "shape_internalcall") {
                    $found_tprint = true
                }
            } else {
                # Now we wait for a string muehehehe.
                if ($cont.shape == "shape_string") {
                    let file_contents = (open --raw $file)
                    let file_ast = (ast -f $file_contents)
                    let match_idx = $section.index
                    let match_start = ($file_ast | get $match_idx | get span.start)
                    let match_end = ($file_ast | get $match_idx | get span.end)
                    let line = ($file_contents | str substring 1..<$match_start | lines | length)
                    $buffer += $"#: ($file | path basename):($line)\n"
                    # We only use this because it's the closest to what we do.
                    $buffer += "#, python-brace-format\n"
                    $buffer += $"msgid ($cont.content)\n"
                    $buffer += "msgstr \"\"\n\n"
                    $found_tprint = false
                }
            }
        }
    }

    $buffer = ($buffer | ^msguniq)

    if ($output == null) {
        print $buffer
    } else {
        $buffer | save -f $output
    }

    exit 0
}
